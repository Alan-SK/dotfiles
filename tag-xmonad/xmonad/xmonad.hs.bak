-- =======
-- Imports
-- =======
-- import XMonad
-- import Data.Monoid
-- import System.Exit
-- import  System.IO
--
-- import XMonad.Util.Run
-- import XMonad.Util.Run (spawnPipe)
-- import XMonad.Util.SpawnOnce
--
-- import XMonad.Hooks.ManageDocks
-- import XMonad.Hooks.SetWMName
-- import XMonad.Hooks.EwmhDesktops
-- import XMonad.Hooks.DynamicLog
--
-- import XMonad.Layout.Spacing
-- import XMonad.Layout.NoBorders
-- import XMonad.Layout.LayoutModifier
--
-- import XMonad.Actions.WorkspaceNames
--
-- import qualified XMonad.StackSet as W
-- import qualified Data.Map        as M
import XMonad
import XMonad.Config.Desktop
import Data.Monoid
import Data.Maybe (isJust)
import System.IO (hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W

    -- Utilities
import XMonad.Util.Loggers
import XMonad.Util.EZConfig (additionalKeysP, additionalMouseBindings)  
import XMonad.Util.NamedScratchpad
import XMonad.Util.Run (safeSpawn, unsafeSpawn, runInTerm, spawnPipe)
import XMonad.Util.SpawnOnce

    -- Hooks
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, defaultPP, wrap, pad, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Hooks.ManageDocks (avoidStruts, docksStartupHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, isDialog,  doFullFloat, doCenterFloat) 
import XMonad.Hooks.Place (placeHook, withGaps, smart)
import XMonad.Hooks.SetWMName
import XMonad.Hooks.EwmhDesktops   -- required for xcomposite in obs to work

    -- Actions
import XMonad.Actions.Minimize (minimizeWindow)
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.CopyWindow (kill1, copyToAll, killAllOtherCopies, runOrCopy)
import XMonad.Actions.WindowGo (runOrRaise, raiseMaybe)
import XMonad.Actions.WithAll (sinkAll, killAll)
import XMonad.Actions.CycleWS (moveTo, shiftTo, WSType(..), nextScreen, prevScreen, shiftNextScreen, shiftPrevScreen)
import XMonad.Actions.GridSelect
import XMonad.Actions.DynamicWorkspaces (addWorkspacePrompt, removeEmptyWorkspace)
import XMonad.Actions.MouseResize
import qualified XMonad.Actions.ConstrainedResize as Sqr

    -- Layouts modifiers
import XMonad.Layout.PerWorkspace (onWorkspace) 
import XMonad.Layout.Renamed (renamed, Rename(CutWordsLeft, Replace))
import XMonad.Layout.WorkspaceDir
import XMonad.Layout.Spacing (spacing) 
import XMonad.Layout.NoBorders
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import XMonad.Layout.Reflect (reflectVert, reflectHoriz, REFLECTX(..), REFLECTY(..))
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), Toggle(..), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))

    -- Layouts
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.OneBig
import XMonad.Layout.ThreeColumns
import XMonad.Layout.ResizableTile
import XMonad.Layout.ZoomRow (zoomRow, zoomIn, zoomOut, zoomReset, ZoomMessage(ZoomFullToggle))
import XMonad.Layout.IM (withIM, Property(Role))

    -- Prompts
import XMonad.Prompt (defaultXPConfig, XPConfig(..), XPPosition(Top), Direction1D(..))

-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal      = "alacritty"
myModMask       = mod4Mask  -- Sets modkey to super/windows key
myTerminal      = "alacritty"      -- Sets default terminal
myTextEditor    = "nvim"     -- Sets default text editor
myBorderWidth   = 2         -- Sets border width for windows
windowCount     = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

main = do
    -- Launching three instances of xmobar on their monitors.
    xmproc <- spawnPipe "xmobar -x 0"
    -- the xmonad, ya know...what the WM is named after!
    xmonad $ ewmh desktopConfig
        { manageHook = ( isFullscreen --> doFullFloat ) <+> myManageHook <+> manageHook desktopConfig <+> manageDocks
        , logHook = dynamicLogWithPP xmobarPP
                        { ppOutput = \x -> hPutStrLn xmproc0 x  >> hPutStrLn xmproc1 x  >> hPutStrLn xmproc2 x
                        , ppCurrent = xmobarColor "#c3e88d" "" . wrap "[" "]" -- Current workspace in xmobar
                        , ppVisible = xmobarColor "#c3e88d" ""                -- Visible but not current workspace
                        , ppHidden = xmobarColor "#82AAFF" "" . wrap "*" ""   -- Hidden workspaces in xmobar
                        , ppHiddenNoWindows = xmobarColor "#F07178" ""        -- Hidden workspaces (no windows)
                        , ppTitle = xmobarColor "#d0d0d0" "" . shorten 60     -- Title of active window in xmobar
                        , ppSep =  "<fc=#666666> | </fc>"                     -- Separators in xmobar
                        , ppUrgent = xmobarColor "#C45500" "" . wrap "!" "!"  -- Urgent workspace
                        , ppExtras  = [windowCount]                           -- # of windows current workspace
                        , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]
                        }
        , modMask            = myModMask
        , terminal           = myTerminal
        , startupHook        = myStartupHook
        , layoutHook         = myLayoutHook 
        , workspaces         = myWorkspaces
        , borderWidth        = myBorderWidth
        , normalBorderColor  = "#292d3e"
        , focusedBorderColor = "#bbc5ff"
        } `additionalKeysP`         myKeys 

myStartupHook = do
          spawnOnce "feh --bg-fill ~/Pictures/壁纸/bg.jpg &"
          spawnOnce "picom &"
          spawnOnce "nm-applet &"
          spawnOnce "volumeicon &"
          spawnOnce "trayer --edge top --align right --widthtype request --padding 6 --SetDockType true --SetPartialStrut true --expand true --monitor 1 --transparent true --alpha 0 --tint 0x292d3e --height 18 &"
          --spawnOnce "emacs --daemon &" 
          setWMName "LG3D"

xmobarEscape = concatMap doubleLts
  where
        doubleLts '<' = "<<"
        doubleLts x   = [x]
        
myWorkspaces :: [String]   
myWorkspaces = clickable . (map xmobarEscape) 
               $ ["dev", "www", "sys", "doc", "vbox", "chat", "mus", "vid", "gfx"]
  where                                                                      
        clickable l = [ "<action=xdotool key super+" ++ show (n) ++ ">" ++ ws ++ "</action>" |
                      (i,ws) <- zip [1..9] l,                                        
                      let n = i ] 

myManageHook :: Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
     [  className =? "firefox"     --> doShift "<action=xdotool key super+2>www</action>"
      , title =? "qutebrowser"     --> doShift "<action=xdotool key super+2>www</action>"
      , title =? "irssi"           --> doShift "<action=xdotool key super+6>chat</action>"
      , className =? "mpv"         --> doShift "<action=xdotool key super+8>vid</action>"
      , className =? "vlc"         --> doShift "<action=xdotool key super+8>vid</action>"
      , title =? "Oracle VM VirtualBox Manager"  --> doFloat
      , className =? "Oracle VM VirtualBox Manager"  --> doShift "<action=xdotool key super+5>vbox</action>"
      , className =? "Gimp"        --> doFloat
      , className =? "Gimp"        --> doShift "<action=xdotool key super+9>gfx</action>"
      , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
     ] <+> namedScratchpadManageHook myScratchPads

myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats $ 
               mkToggle (NBFULL ?? NOBORDERS ?? EOT) $ myDefaultLayout
             where 
                 myDefaultLayout = tall ||| grid ||| threeCol ||| threeRow ||| oneBig ||| noBorders monocle ||| space ||| floats


tall       = renamed [Replace "tall"]     $ limitWindows 12 $ spacing 6 $ ResizableTall 1 (3/100) (1/2) []
grid       = renamed [Replace "grid"]     $ limitWindows 12 $ spacing 6 $ mkToggle (single MIRROR) $ Grid (16/10)
threeCol   = renamed [Replace "threeCol"] $ limitWindows 3  $ ThreeCol 1 (3/100) (1/2) 
threeRow   = renamed [Replace "threeRow"] $ limitWindows 3  $ Mirror $ mkToggle (single MIRROR) zoomRow
oneBig     = renamed [Replace "oneBig"]   $ limitWindows 6  $ Mirror $ mkToggle (single MIRROR) $ mkToggle (single REFLECTX) $ mkToggle (single REFLECTY) $ OneBig (5/9) (8/12)
monocle    = renamed [Replace "monocle"]  $ limitWindows 20 $ Full
space      = renamed [Replace "space"]    $ limitWindows 4  $ spacing 12 $ Mirror $ mkToggle (single MIRROR) $ mkToggle (single REFLECTX) $ mkToggle (single REFLECTY) $ OneBig (2/3) (2/3)
floats     = renamed [Replace "floats"]   $ limitWindows 20 $ simplestFloat

myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
                , NS "cmus" spawnCmus findCmus manageCmus  
                ]
    where
    spawnTerm  = myTerminal ++  " -n scratchpad"
    findTerm   = resource =? "scratchpad"
    manageTerm = customFloating $ W.RationalRect l t w h
                 where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w
    spawnCmus  = myTerminal ++  " -n cmus 'cmus'"
    findCmus   = resource =? "cmus"
    manageCmus = customFloating $ W.RationalRect l t w h
                 where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w

-- -- Whether focus follows the mouse pointer.
-- myFocusFollowsMouse :: Bool
-- myFocusFollowsMouse = True
--
-- -- Whether clicking on a window to focus also passes the click to the window
-- myClickJustFocuses :: Bool
-- myClickJustFocuses = False
--
-- -- Width of the window border in pixels.
-- --
-- myBorderWidth   = 1
--
-- -- modMask lets you specify which modkey you want to use. The default
-- -- is mod1Mask ("left alt").  You may also consider using mod3Mask
-- -- ("right alt"), which does not conflict with emacs keybindings. The
-- -- "windows key" is usually mod4Mask.
-- --
-- myModMask       = mod4Mask
--
-- -- The default number of workspaces (virtual screens) and their names.
-- -- By default we use numeric strings, but any string may be used as a
-- -- workspace name. The number of workspaces is determined by the length
-- -- of this list.
-- --
-- -- A tagging example:
-- --
-- -- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
-- --
--
-- myWorkspaces :: [String]
-- myWorkspaces    = ["1","2","3","4","5","6","7","8","9"]
--
-- -- Border colors for unfocused and focused windows, respectively.
-- --
-- myNormalBorderColor  = "#dddddd"
-- myFocusedBorderColor = "#38a5ff"
--
-- ------------------------------------------------------------------------
-- -- Key bindings. Add, modify or remove key bindings here.
-- --
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

		-- launch a terminal
		[ ((modm,               xK_Return), spawn $ XMonad.terminal conf)

		-- launch dmenu
		, ((modm,               xK_d     ), spawn "rofi -show drun")

		-- launch gmrun
		, ((modm .|. shiftMask, xK_p     ), spawn "gmrun")

		-- close focused window
		, ((modm .|. shiftMask, xK_q     ), kill)

		 -- Rotate through the available layout algorithms
		, ((modm,               xK_space ), sendMessage NextLayout)

		--  Reset the layouts on the current workspace to default
		, ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)

		-- Resize viewed windows to the correct size
		, ((modm,               xK_n     ), refresh)

		-- Move focus to the next window
		, ((modm,               xK_Tab   ), windows W.focusDown)

		-- Move focus to the next window
		, ((modm,               xK_j     ), windows W.focusDown)

		-- Move focus to the previous window
		, ((modm,               xK_k     ), windows W.focusUp  )

		-- Move focus to the master window
		, ((modm,               xK_m     ), windows W.focusMaster  )

		-- Swap the focused window and the master window
		, ((modm .|. shiftMask, xK_Return), windows W.swapMaster)

		-- Swap the focused window with the next window
		, ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )

		-- Swap the focused window with the previous window
		, ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

		-- Shrink the master area
		, ((modm,               xK_h     ), sendMessage Shrink)

		-- Expand the master area
		, ((modm,               xK_l     ), sendMessage Expand)

		-- Push window back into tiling
		, ((modm,               xK_t     ), withFocused $ windows . W.sink)

		-- Increment the number of windows in the master area
		, ((modm              , xK_comma ), sendMessage (IncMasterN 1))

		-- Deincrement the number of windows in the master area
		, ((modm              , xK_period), sendMessage (IncMasterN (-1)))

		-- Toggle the status bar gap
		-- Use this binding with avoidStruts from Hooks.ManageDocks.
		-- See also the statusBar function from Hooks.DynamicLog.
		--
		-- , ((modm              , xK_b     ), sendMessage ToggleStruts)

		-- Quit xmonad
		, ((modm .|. shiftMask, xK_c     ), io (exitWith ExitSuccess))

		-- Restart xmonad
		, ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")

		-- Run xmessage with a summary of the default keybindings (useful for beginners)
		, ((modm .|. shiftMask, xK_slash ), spawn ("echo \"" ++ help ++ "\" | xmessage -file -"))

		]
		++

		--
		-- mod-[1..9], Switch to workspace N
		-- mod-shift-[1..9], Move client to workspace N
		--
		[((m .|. modm, k), windows $ f i)
				| (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
				, (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
		++

		--
		-- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
		-- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
		--
		[((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
				| (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
				, (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]


------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

		-- mod-button1, Set the window to floating mode and move by dragging
		[ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
																			 >> windows W.shiftMaster))

		-- mod-button2, Raise the window to the top of the stack
		, ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

		-- mod-button3, Set the window to floating mode and resize by dragging
		, ((modm, button3), (\w -> focus w >> mouseResizeWindow w
																			 >> windows W.shiftMaster))

		-- you may also bind events to the mouse scroll wheel (button4 and button5)
		]
--
-- ------------------------------------------------------------------------
-- -- Layouts:
--
-- -- You can specify and transform your layouts by modifying these values.
-- -- If you change layout bindings be sure to use 'mod-shift-space' after
-- -- restarting (with 'mod-q') to reset your layout state to the new
-- -- defaults, as xmonad preserves your old layout settings by default.
-- --
-- -- The available layouts.  Note that each layout is separated by |||,
-- -- which denotes layout choice.
-- --
-- myLayout = avoidStruts (tiled ||| Mirror tiled ||| Full)
--   where
--      -- default tiling algorithm partitions the screen into two panes
--      tiled   =  spacingRaw False (Border 10 10 10 10) True (Border 10 10 10 10) True $ Tall nmaster delta ratio
--
--      -- The default number of windows in the master pane
--      nmaster = 1
--
--      -- Default proportion of screen occupied by master pane
--      ratio   = 1/2
--
--      -- Percent of screen to increment by when resizing panes
--      delta   = 3/100
--
-- myWorkspaces :: [String]
-- myWorkspaces = clickable . (map xmobarEscape)
--                -- $ ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
--                $ ["dev", "www", "sys", "doc", "vbox", "chat", "mus", "vid", "gfx"]
--   where
--         clickable l = [ "<action=xdotool key super+" ++ show (n) ++ "> " ++ ws ++ " </action>" |
--                       (i,ws) <- zip [1..9] l,
--                       let n = i ]
--
-- ------------------------------------------------------------------------
-- -- Window rules:
--
-- -- Execute arbitrary actions and WindowSet manipulations when managing
-- -- a new window. You can use this to, for example, always float a
-- -- particular program, or have a client always appear on a particular
-- -- workspace.
-- --
-- -- To find the property name associated with a program, use
-- -- > xprop | grep WM_CLASS
-- -- and click on the client you're interested in.
-- --
-- -- To match on the WM_NAME, you can use 'title' in the same way that
-- -- 'className' and 'resource' are used below.
-- --
-- myManageHook = composeAll
--     [ className =? "MPlayer"        --> doFloat
--     , className =? "Gimp"           --> doFloat
--     , resource  =? "desktop_window" --> doIgnore
--     , resource  =? "kdesktop"       --> doIgnore ]
--
-- ------------------------------------------------------------------------
-- -- Event handling
--
-- -- * EwmhDesktops users should change this to ewmhDesktopsEventHook
-- --
-- -- Defines a custom handler function for X Events. The function should
-- -- return (All True) if the default handler is to be run afterwards. To
-- -- combine event hooks use mappend or mconcat from Data.Monoid.
-- --
-- myEventHook = mempty
--
-- ------------------------------------------------------------------------
-- -- Status bars and logging
--
-- -- Perform an arbitrary action on each internal state change or X event.
-- -- See the 'XMonad.Hooks.DynamicLog' extension for examples.
-- --
-- myLogHook = return ()
--
-- ------------------------------------------------------------------------
-- -- Startup hook
-- -- Perform an arbitrary action each time xmonad starts or is restarted
-- -- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- -- per-workspace layout choices.
-- --
-- -- By default, do nothing.
-- myStartupHook = do
--           spawnOnce "picom &"
--           setWMName "LG3D"
--
-- ------------------------------------------------------------------------
-- -- Now run xmonad with all the defaults we set up.
--
-- -- Run xmonad with the settings you specify. No need to modify this.
-- --
-- main = do
--     xmproc0 <- spawnPipe "xmobar -x 0"
--     xmonad $ docks defaults
--     xmonad $ ewmh def
--         { manageHook = ( isFullscreen --> doFullFloat ) <+> myManageHook <+> manageDocks
--         -- Run xmonad commands from command line with "xmonadctl command". Commands include:
--         -- shrink, expand, next-layout, default-layout, restart-wm, xterm, kill, refresh, run,
--         -- focus-up, focus-down, swap-up, swap-down, swap-master, sink, quit-wm. You can run
--         -- "xmonadctl 0" to generate full list of commands written to ~/.xsession-errors.
--         , handleEventHook    = serverModeEventHookCmd
--                                <+> serverModeEventHook
--                                <+> serverModeEventHookF "XMONAD_PRINT" (io . putStrLn)
--                                <+> docksEventHook
--         , modMask            = myModMask
--         , terminal           = myTerminal
--         , startupHook        = myStartupHook
--         , layoutHook         = myLayoutHook
--         , workspaces         = myWorkspaces
--         , borderWidth        = myBorderWidth
--         , normalBorderColor  = myNormColor
--         , focusedBorderColor = myFocusColor
--         , logHook = workspaceHistoryHook <+> myLogHook <+> dynamicLogWithPP xmobarPP
--                         { ppOutput = \x -> hPutStrLn xmproc x  >> hPutStrLn xmproc1 x  >> hPutStrLn xmproc2 x
--                         , ppCurrent = xmobarColor "#c3e88d" "" . wrap "[" "]" -- Current workspace in xmobar
--                         , ppVisible = xmobarColor "#c3e88d" ""                -- Visible but not current workspace
--                         , ppHidden = xmobarColor "#82AAFF" "" . wrap "*" ""   -- Hidden workspaces in xmobar
--                         , ppHiddenNoWindows = xmobarColor "#c792ea" ""        -- Hidden workspaces (no windows)
--                         , ppTitle = xmobarColor "#b3afc2" "" . shorten 60     -- Title of active window in xmobar
--                         , ppSep =  "<fc=#666666> <fn=2>|</fn> </fc>"                     -- Separators in xmobar
--                         , ppUrgent = xmobarColor "#C45500" "" . wrap "!" "!"  -- Urgent workspace
--                         , ppExtras  = [windowCount]                           -- # of windows current workspace
--                         , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]
--                         }
--         } `additionalKeysP` myKeys
--
-- -- A structure containing your configuration settings, overriding
-- -- fields in the default config. Any you don't override, will
-- -- use the defaults defined in xmonad/XMonad/Config.hs
-- --
-- -- No need to modify this.
-- --
-- defaults = def {
--       -- simple stuff
--         terminal           = myTerminal,
--         focusFollowsMouse  = myFocusFollowsMouse,
--         clickJustFocuses   = myClickJustFocuses,
--         borderWidth        = myBorderWidth,
--         modMask            = myModMask,
--         workspaces         = myWorkspaces,
--         normalBorderColor  = myNormalBorderColor,
--         focusedBorderColor = myFocusedBorderColor,
--
--       -- key bindings
--         keys               = myKeys,
--         mouseBindings      = myMouseBindings,
--
--       -- hooks, layouts
--         layoutHook         = myLayout,
--         manageHook         = myManageHook,
--         handleEventHook    = myEventHook,
--         logHook            = myLogHook,
--         startupHook        = myStartupHook
--     }
--
-- -- | Finally, a copy of the default bindings in simple textual tabular format.
-- help :: String
-- help = unlines ["The default modifier key is 'alt'. Default keybindings:",
--     "",
--     "-- launching and killing programs",
--     "mod-Shift-Enter  Launch xterminal",
--     "mod-p            Launch dmenu",
--     "mod-Shift-p      Launch gmrun",
--     "mod-Shift-c      Close/kill the focused window",
--     "mod-Space        Rotate through the available layout algorithms",
--     "mod-Shift-Space  Reset the layouts on the current workSpace to default",
--     "mod-n            Resize/refresh viewed windows to the correct size",
--     "",
--     "-- move focus up or down the window stack",
--     "mod-Tab        Move focus to the next window",
--     "mod-Shift-Tab  Move focus to the previous window",
--     "mod-j          Move focus to the next window",
--     "mod-k          Move focus to the previous window",
--     "mod-m          Move focus to the master window",
--     "",
--     "-- modifying the window order",
--     "mod-Return   Swap the focused window and the master window",
--     "mod-Shift-j  Swap the focused window with the next window",
--     "mod-Shift-k  Swap the focused window with the previous window",
--     "",
--     "-- resizing the master/slave ratio",
--     "mod-h  Shrink the master area",
--     "mod-l  Expand the master area",
--     "",
--     "-- floating layer support",
--     "mod-t  Push window back into tiling; unfloat and re-tile it",
--     "",
--     "-- increase or decrease number of windows in the master area",
--     "mod-comma  (mod-,)   Increment the number of windows in the master area",
--     "mod-period (mod-.)   Deincrement the number of windows in the master area",
--     "",
--     "-- quit, or restart",
--     "mod-Shift-q  Quit xmonad",
--     "mod-q        Restart xmonad",
--     "mod-[1..9]   Switch to workSpace N",
--     "",
--     "-- Workspaces & screens",
--     "mod-Shift-[1..9]   Move client to workspace N",
--     "mod-{w,e,r}        Switch to physical/Xinerama screens 1, 2, or 3",
--     "mod-Shift-{w,e,r}  Move client to screen 1, 2, or 3",
--     "",
--     "-- Mouse bindings: default actions bound to mouse events",
--     "mod-button1  Set the window to floating mode and move by dragging",
--     "mod-button2  Raise the window to the top of the stack",
--     "mod-button3  Set the window to floating mode and resize by dragging"]
